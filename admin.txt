<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .container {
            max-width: 600px;
            width: 90%;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }
        fieldset {
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 20px;
            background: linear-gradient(45deg, purple, green);
        }
        legend {
            padding: 0 10px;
            background-color: white;
            color: #333;
            border-radius: 5px;
            font-weight: bold;
        }
        input[type=date], input[type=number], input[type=text], input[type=password] {
            width: 100%;
            padding: 12px 20px;
            color: darkgreen;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            margin-top: 10px;
        }
        input[type=submit], button {
            width: 100%;
            background-color: #4CAF50;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .data-item {
            margin: 10px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background: linear-gradient(45deg, lightgreen, lightblue);
            font-size: 14px;
        }
        .record-item, .cart-item, .order-item {
            margin: 5px 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
            background-color: #f9f9f9;
            background: linear-gradient(-45deg, lightgreen, lightblue);
        }
        #dataContainer, #cartContainer, #ordersContainer {
            margin-top: 20px;
        }
        .hidden {
            display: none;
        }
        @media (max-width: 400px) {
            .container {
                padding: 10px;
            }
            h1 {
                font-size: 24px;
            }
            input[type=submit], button {
                font-size: 14px;
                padding: 12px;
            }
            .data-item {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Admin Panel</h1>
        <fieldset>
            <legend>Mobile Number</legend>
            <input type="text" id="mobileNumber" required placeholder="Please Enter Mobile Number" maxlength="10"/>  
        </fieldset>
        <button onclick="fetchData()">Fetch Data</button>
        <div id="dataContainer"></div>
        <div id="cartContainer"></div>
        <div id="ordersContainer"></div>
    </div>

    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.1.0/firebase-app.js';
        import { getFirestore, doc, getDoc, collection, getDocs, updateDoc, deleteDoc, addDoc } from 'https://www.gstatic.com/firebasejs/9.1.0/firebase-firestore.js';

        const firebaseConfig = {
            apiKey: "AIzaSyDjpg5dNL6R44dPpoDQabNaT8tLVmVWTQQ",
            authDomain: "eekh-website.firebaseapp.com",
            projectId: "eekh-website",
            storageBucket: "eekh-website.appspot.com",
            messagingSenderId: "276234231567",
            appId: "1:276234231567:web:1509267f60d97a83cea87a",
            measurementId: "G-QX5HCKXMDK"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        window.fetchData = async function() {
            const mobileNumber = document.getElementById('mobileNumber').value;
            const dataContainer = document.getElementById('dataContainer');
            const cartContainer = document.getElementById('cartContainer');
            const ordersContainer = document.getElementById('ordersContainer');
            dataContainer.innerHTML = ''; // Clear previous data
            cartContainer.innerHTML = ''; // Clear previous cart data
            ordersContainer.innerHTML = ''; // Clear previous orders data

            if (mobileNumber) {
                try {
                    const docRef = doc(db, 'users', mobileNumber);
                    const docSnap = await getDoc(docRef);

                    if (docSnap.exists()) {
                        const data = docSnap.data();
                        const dataItem = document.createElement('div');
                        dataItem.classList.add('data-item');
                        
                        // Display top-level fields
                        dataItem.innerHTML = `<strong>Name:</strong> ${data.name}<br>
                                              <strong>Referral Phone Number:</strong> ${data.referralPhoneNumber}<br>
                                              <strong>Password:</strong> ${data.password}`;

                        // Fetch and display nested records if they exist
                        const recordsRef = collection(docRef, 'records');
                        const recordsSnapshot = await getDocs(recordsRef);
                        if (!recordsSnapshot.empty) {
                            const recordsContainer = document.createElement('div');
                            recordsContainer.innerHTML = '<strong>Records:</strong>';
                            recordsSnapshot.forEach((recordDoc) => {
                                const recordData = recordDoc.data();
                                const recordItem = document.createElement('div');
                                recordItem.classList.add('record-item');
                                recordItem.innerHTML = `<strong>Name:</strong> ${recordData.name}<br>
                                                        <strong>Date of Birth:</strong> ${recordData.dob}`;
                                recordsContainer.appendChild(recordItem);
                            });
                            dataItem.appendChild(recordsContainer);
                        } else {
                            dataItem.innerHTML += '<p>No records found</p>';
                        }

                        dataContainer.appendChild(dataItem);

                        // Fetch and display cart items if they exist
                        const cartRef = collection(docRef, 'cart'); // Ensure 'cart' is the correct path
                        const cartSnapshot = await getDocs(cartRef);
                        if (!cartSnapshot.empty) {
                            const cartContainerTitle = document.createElement('h2');
                            cartContainerTitle.textContent = "Cart";
                            cartContainer.appendChild(cartContainerTitle);

                            cartSnapshot.forEach((cartDoc) => {
                                const cartData = cartDoc.data();
                                
                                const cartItem = document.createElement('div');
                                cartItem.classList.add('cart-item');
                                cartItem.innerHTML = `<strong>Item:</strong> ${cartData.itemName}<br>
                                                      <strong>Quantity:</strong> ${cartData.quantity}<br>
                                                      <strong>Price:</strong> ₹${cartData.itemPrice}`;
                                cartContainer.appendChild(cartItem);
                            });
                        } else {
                            cartContainer.innerHTML = '<p>No cart items found</p>';
                        }

                        // Fetch and display order details if they exist
                        const ordersRef = collection(docRef, 'orders');
                        const ordersSnapshot = await getDocs(ordersRef);
                        if (!ordersSnapshot.empty) {
                            const ordersContainerTitle = document.createElement('h2');
                            ordersContainerTitle.textContent = "Orders";
                            ordersContainer.appendChild(ordersContainerTitle);

                            ordersSnapshot.forEach((orderDoc) => {
                                const orderData = orderDoc.data();

                                orderData.order.forEach((item, index) => {
                                    const orderItem = document.createElement('div');
                                    orderItem.classList.add('order-item');
                                    orderItem.innerHTML = `<strong>Order ${index + 1}:</strong><br>
                                                           <img src="${item.itemImage}" alt="${item.itemName}" width="50"><br>
                                                           <strong>Name:</strong> ${item.itemName}<br>
                                                           <strong>Quantity:</strong> ${item.quantity}<br>
                                                           <strong>Price:</strong> ₹${item.itemPrice}`;
                                    ordersContainer.appendChild(orderItem);
                                });

                                // Add approve/reject/edit buttons for each order
                                const orderActions = document.createElement('div');
                                orderActions.classList.add('order-actions');

                                const approveButton = document.createElement('button');
                                approveButton.textContent = 'Approve';
                                approveButton.onclick = () => handleOrderApproval(orderDoc.id, orderData);
                                orderActions.appendChild(approveButton);

                                const rejectButton = document.createElement('button');
                                rejectButton.textContent = 'Reject';
                                rejectButton.onclick = () => handleOrderRejection(orderDoc.id, orderData);
                                orderActions.appendChild(rejectButton);

                                const editButton = document.createElement('button');
                                editButton.textContent = 'Edit';
                                editButton.onclick = () => handleOrderEdit(orderDoc.id, orderData);
                                orderActions.appendChild(editButton);

                                if (orderData.status === 'Approved') {
                                    approveButton.classList.add('hidden');
                                    rejectButton.classList.add('hidden');
                                    editButton.classList.add('hidden');
                                }

                                if (orderData.status === 'Rejected') {
                                    approveButton.classList.add('hidden');
                                    rejectButton.classList.add('hidden');
                                    editButton.classList.add('hidden');
                                }

                                ordersContainer.appendChild(orderActions);
                            });
                        } else {
                            ordersContainer.innerHTML = '<p>No orders found</p>';
                        }
                    } else {
                        dataContainer.innerHTML = '<p>No data found for this mobile number</p>';
                    }
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            }
        }

        async function handleOrderApproval(orderId, orderData) {
    console.log("Approved order with ID:", orderId);

    // Calculate the total amount and referral amount (10% of the total amount)
    const totalAmount = orderData.order.reduce((total, item) => total + item.itemPrice * item.quantity, 0);
    const referralAmount = totalAmount * 0.05;

    // Get the user document to fetch the referral phone number
    const userDocRef = doc(db, 'users', orderData.userMobileNumber);
    
    try {
        const userDocSnap = await getDoc(userDocRef);

        if (userDocSnap.exists()) {
            const userData = userDocSnap.data();
            const referralNumber = userData.referralPhoneNumber;

            if (referralNumber) {
                // Reference to the referral user's document
                const referralDocRef = doc(db, 'users', referralNumber);
                const referralDocSnap = await getDoc(referralDocRef);

                if (referralDocSnap.exists()) {
                    // Referral number exists, update its wallet
                    console.log(`Referral number found: ${referralNumber}`);

                    // Update or create the 'referralAmount' field in the referral user's document
                    const referralData = referralDocSnap.data();
                    const currentReferralAmount = referralData.referralAmount || 0;
                    const updatedReferralAmount = currentReferralAmount + referralAmount;

                    await updateDoc(referralDocRef, {
                        referralAmount: updatedReferralAmount
                    });

                    console.log(`Referral amount ₹${referralAmount} added to the referral wallet of ${referralNumber}`);
                } else {
                    console.log(`Referral number ${referralNumber} does not exist.`);
                    // Optionally, you could create a new document for the referral number if needed
                }
            } else {
                console.log("No referral number available in user data.");
            }
        } else {
            console.log("User document does not exist.");
        }
    } catch (error) {
        console.error("Error fetching or updating referral amount:", error);
    }

    // Update the status of the order to 'Approved'
    try {
        const orderDocRef = doc(db, 'users', orderData.userMobileNumber, 'orders', orderId);
        await updateDoc(orderDocRef, { status: 'Approved' });

        console.log("Order status updated to 'Approved'");
    } catch (error) {
        console.error("Error updating order status:", error);
    }

    // Refresh data after approval
    await window.fetchData();
}

        
        async function handleOrderRejection(orderId, orderData) {
            console.log("Rejected order with ID:", orderId);

            // Check if userMobileNumber is present in orderData
            const userMobileNumber = orderData.userMobileNumber;
            if (userMobileNumber) {
                try {
                    // Reference to the specific order document
                    const orderDocRef = doc(db, 'users', userMobileNumber, 'orders', orderId);
                    await updateDoc(orderDocRef, { status: 'Rejected' });
                    
                    console.log("Order status updated to 'Rejected'");
                } catch (error) {
                    console.error("Error updating order status:", error);
                }
            } else {
                console.log("Mobile number is missing in orderData:", orderData);
            }

            // Refresh data after Rejection
            await window.fetchData();
        }


        async function handleOrderEdit(orderId, orderData) {
            const newQuantity = prompt('Enter new quantity for the item:', '1');
            if (newQuantity) {
                try {
                    // Assuming that orderData.order is an array of items
                    const updatedOrder = { ...orderData };
                    updatedOrder.order[0].quantity = newQuantity; // Update quantity of the first item for demonstration
                    
                    // Reference to the specific order document
                    const orderDocRef = doc(db, 'users', orderData.userMobileNumber, 'orders', orderId);
                    await updateDoc(orderDocRef, { order: updatedOrder.order });
                    
                    console.log("Order updated with ID:", orderId);
                    await window.fetchData(); // Refresh data after editing
                } catch (error) {
                    console.error("Error updating order:", error);
                }
            }
        }

        window.handleOrderRejection = handleOrderRejection;
        window.handleOrderApproval = handleOrderApproval;
        window.handleOrderEdit = handleOrderEdit;
        
    </script>
</body>
</html>
